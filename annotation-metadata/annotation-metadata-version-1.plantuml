@startuml
title Testing New Standardization Effort Version 1.1
/'
The axon is connected to the Presynaptic 
sending a chemical to be released into the 
Postsynaptic.
'/
Cell ---[#darkred]-* Soma
Soma -[#darkred]-* Spine
Soma ------[#darkred]-* Axon
Soma -[#darkred]-* Dendrite
Soma -[#darkred]-* Cilia 
Dendrite -[#darkred]-* Shaft
Dendrite -[#darkred]-* Spine
Axon -[#darkred]-* Axon_Initial_Segment
Axon -[#darkred]-* Bouton
Gap_Junctions -[#darkred]-* Axon
Myelin -[#darkred]-* Axon
Synapse -[#darkred]-* Axon
Synapse -[#darkred]-* Dendrite
Synapse -[#darkred]-* Axon_Initial_Segment
Synapse -[#darkred]-* Bouton
Synapse ---[#darkred]-* Spine
Synapse ---[#darkred]-* Shaft
Synapse -[#darkred]-* Soma 
Spine_Apparatus -[#darkred]* Spine
Organelles -[#darkred]-* Gap_Junctions
Organelles -[#darkred]-* Nucleus
Organelles -[#darkred]-* Mitochondria
Organelles -[#darkred]-* SynapticVesicle
Organelles -[#darkred]-* Myelin
Organelles -[#darkred]-* Cleft
Organelles -[#darkred]-* Spine_Apparatus
Nucleus -[#darkred]-* Soma
Cleft -[#darkred]-* Synapse 
Mitochondria -[#darkred]-* All_Cell_Compartments
SynapticVesicle -[#darkred]-* Synapse

class Annotation_Provenance{
	*Annotator: 
	contributor(s) : str, 
	contributor_method : enum, 
	novice_annotator : boolean, 
	expert_annotator : boolean, 
	novice_proofreader : boolean, 
	expert_proofreader : boolean, 
	other : str

	*Score:
	annotation_reviewed : int, 
	review_time_hours : int, 
	condfidence_value: int,
	other : str

	*Co-Registration:
	object_id : str, 
	other : str

	*Versioning:
	version_checkpoint_value : int, 
	version_checkpoint_updates : str, 
	other : str
}

class Cell{
	*CellTypes [boolean]
	*NeuronType [enum]
	*OtherNeuronType [str]
	*GliaTypes [enum]
	*RegionsofInterest [enum]
	*OptionalCellProperties [enum]
}
interface CellTypes{
	neuron 
	glia
}
enum NeuronType{
	sensory_neurons
	motor_neurons
	interneurons
}
enum GliaTypes{
	astrocytes
	microglia 
	oligodendrocyte 
}	
struct OtherGliaTypes{
		str}
struct OtherNeuronType{
	str}
enum RegionsofInterest{
	layer
	brain_regions
	cylinder
}
struct OtherRegionsofInterest{
	str
}
enum OptionalCellProperties{
		multipolar 
		bipolar
		unipolar
		anaxonic
		blood_vessel_type
		interneuron-type
        pyramidal
		c-shaped
        spiny-stellate
        excitatory/spiny-with-atypical-tree
        sparsely-spiny
        lots-of-spines
        possible-interneuron
        web-like-interneuron
        lot-of-axon
        EIRatio
		precursor
}

class Bouton{
}

class Mitochondria{
    *OptionalMitochondriaProperties
    *OtherOptionalMitochondriaProperties
}

enum OptionalMitochondriaProperties{
    lipids 
    proteins
}
struct OtherOptionalMitochondriaProperties{
str
}
enum DendriteProperties{
    apical_dendrite
    basal_dendrite 
    base_neuron_id
    }

struct OtherOptionalDendriteProperties{
str
}

enum SynapseSite{
type
class_label
neuron_id
}
		
struct OtherSynapseSite{
    str
}
class Dendrite{
        *DendriteProperties
        *OtherOptionalDendriteProperties
        *SynapseSite
        *OtherSynapseSite
        *location_DendriteProperties
}
enum OptionalDendriteProperties{
		number_dendriteskeleton_nodes
		number_dendriticspineskeleton_nodes
		number_ciliumskeleton_nodes
		dendritic_shaft
		dendritic_spine
        }

struct OtherOptionalDendriteProperties{
    str
}      
interface location_DendriteProperties{
    *location: 
        x : int
        y : int
        z : int
   
    *bounding_box: 
            x : int
            y : int
            z : int
       
      *size: 
            x : int
            y : int
            z : int
} 

class Spine_Apparatus{
}

class Spine{
    *OptionalSpineProperties
}

entity OptionalSpineProperties{
    number_of_spines
}
struct StringOptionalSpineProperties{
    spine_protrusions
    other
    }


class Soma{
*Optional Soma Properties
}
struct OptionalSomaProperties{
str}
interface OptionalSomaProperties{
    cell body}

class Synapse{
    *Chemical
    *Electrical
    *OptionalSynapseProperties
    *otherOptionalSynapseProperties
    }
enum Chemical{
		presynaptic
		postsynaptic
    }
struct StringChemical{
		other 
        }
enum Electrical{
		gap_junction_id
        }
struct StringElectrical{
    gap_junction_location 
    other
        }
enum OptionalSynapseProperties{
	number_output_synapses 
	number_input_synapses 
	number_excitatory_synapses
	number_inhibitory_synapses
	number_outgoing_synapses
	number_incoming_synapses
	number_incomingexcitatory_synapses
	number_incominginhibitory_synapses
}
struct otherOptionalSynapseProperties{
    other}

class Organelles{
	*Ribosomes : boolean,
    *Endoplasmic_Reticulum : boolean,
	*Mitochondria : boolean,
	*Golgi_Apparatus : boolean,
	*Spine_Apparatus : boolean,
    *SynapticVesicle : boolean,
	*Nucleus : boolean,
	*Gap_Junctions : boolean,
	*Myelin : boolean,
	*Plasma Membrane : boolean
}

class Nucleus{
*Optional Nucleus Properties
*otherNucleusProperties
}
interface NucleusProperties{
nucleolus 
}
struct otherNucleusProperties{
str
}

class Axon{
    *Axon Properties
    }

enum AxonProperties{
	axon_terminal 
	myelinated_axon 
}
	
struct StringAxonProperties{
    base_neuron_id
	other
    }


enum SynapseSite{
		pre_synaptic_site
		neuron_id
}
struct StringSynapseSite{
		type 
		class_label 
		other 
}

enum OptionalAxonProperties{
	number_of_axons
	number_axonskeleton_nodes
	number_ciliumskeleton_nodes
	number_axoninitialsegmentskeleton_nodes
	number_myelinatedaxonskeleton_nodes
    }

struct StringOptionalAxonProperties{
	other
}

interface OptionalAxonPropertieslocation{
        x : int
        y : int
        z : int
   
    *bounding_box: 
            x : int
            y : int
            z : int
       
       *size: 
            x : int
            y : int
            z : int
} 
class SynapticVesicle{

} 

class Axon_Initial_Segment{
	*Optional Axon_Initial_Segment Properties

}
interface Optional_Axon_Initial_Segment_Properties{
    myelin 
}


@enduml