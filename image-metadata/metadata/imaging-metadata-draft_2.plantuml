@startuml Metadata

'   -----------------------------
'   Layout directives
'   -----------------------------

'   Grouping
together {
    class Project
    class Collection
    class Experiment
    class Channel
}

together {
    class Channel
    class ImagingModalityGeneral
    class ImagingModalitySpecific
    class ImageResolution
}

'   Formatting for readability
'   Splitting into four pages
page 2x2
skinparam pageMargin 10
skinparam pageBorderColor black
skinparam pageBorderColor gray 



'   ------------------------------
'   Primary Classes
'   ------------------------------

'
'   Project
'
class Project {
  *ID:               String

  *Name:             String 
  *Title:            String
  *ShortTitle:       String
  *Keywords:         [String]
  *Description:      String
  *Year:             Date
  *Public:           Boolean
  *Species:          [Species]
  *Publications:     [Publication]
  Links:            [Link]
  *UniqueIdentifier: String
  *License:          [License]
  *Contributor:      [Contributor]
  Acknowledgements: String
  Funding:          [Funding]
  *DateCreated:      Date
  DateModified:     Date
  DOI:              DOI
  .. Additions ..
  '
  ' SocialMedia [mah2022.06.07]
  '     Suggested short social media text describing the dataset to be posted after the 
  '     dataset is available (can include tags). May be same as the title. This suggests a 
  '     length limit on Title (above),  particularly if this is to serve as a condensed 
  '     description for tweetsâ€¦
  *SocialMedia: String
  '
  ' Subject [mah2022.06.07]
  '     If this attribute could be one or more keywords, one or more classification codes, 
  '     or one or more key phrases, it could be more efficiently searched. And keywords and 
  '     codes should be constrained in some sense, not free-format text...
  *Subject: String
  '
  ' SubjectScheme [mah2022.06.07]
  '     Again, to avoid search issues, this should not be free-form text. At the least, the 
  '     proposed metadata schema should provide clear guidance on naming conventions for the 
  '     scheme or classification.
  *SubjectScheme: String
  --
  *ImagingModalities:        [ImagingModalityGeneral]
  ImagingModalitySpecific:  [ImagingModalitySpecific]
  DataTypes:                [DataType]
  *ImageLocations:           [BrainLocation]
  .. Additions ..
  *GeneralModality:          GeneralModality
  *GeneralModalityOther:     String
  *Technique:                [Technique]
  *TechniqueOther:           String
  *Methods:                  String
  *TechnicalInfo:            String
  --
  *ImageBanner:          String
  *ImageTile:            String
  ImageHero:            String
  ImageHeroPosition:    String
  Media:                [String]
  --
  Collections:          [Collection]
  Experiments:          [Experiment]
  Channels:             [Channel]
}

Project::ImageLocations         *-- BrainLocation
Project::Publications           *-- Publication
Project::Species                *-- Species
Project::Links                  *-- Link
Project::Contributor            *-- Contributor
Project::License                *-- License
Project::Funding                *-- Funding
Project::ImagingModalities      *-- ImagingModalityGeneral
Project::ImagingModalitySpecific *-- ImagingModalitySpecific
Project::DataTypes              *-- DataType
Project::Collections            *-- Collection
Project::Experiments            *-- Experiment
Project::Channels               *-- Channel
Project::DOI                    *-- DOI
Project::GeneralModality        *-- GeneralModality
Project::Technique              *-- Technique

'
'   Collection
'
class Collection {
  *ID:           String
  *Name:         String
  *Description:  String
  *Public:       Boolean
  *Creator:      [User]
  *Contributors: [Contributor]
  *DateCreated:  Date
  DateModified: Date
  *License:      [License]
  Acknowledgements: String
  DOI:          DOI
  Version:      String
  .. Additions ..
  *Citations:    [String]
  AccessControl: Boolean
  --
  Species:      [Species]
  .. Additions ..
  '
  ' TaxonomyTerm
  '     From NCBI Thesaurus. Prefer NCBI taxonomy before others.
  *TaxonomyTerm: String!
  --
  Experiments:  [Experiment]
}

Collection::Creator         *-- User
Collection::Contributors    *-- Contributor
Collection::License         *-- License
Collection::DOI             *-- DOI
Collection::Species         *-- Species
Collection::Experiments     *-- Experiment

'
'   Experiment
'
class Experiment {
  *ID:               String
  *Name:             String
  *Description:      String
  *Public:           Boolean
  *Creator:          [User]
  *Contributors:     [Contributor]
  *DateCreated:      Date
  DateModified:     Date
  *License:          License
  --
  *Species:          Species
  *ImageLocation:    BrainLocation
  *Protocol:         Link
  .. Additions ..
  ' TODO: Image Orientation and Landmark probably belong in LightMicroscopySpecific, 
  '       which is referenced from Channel. [mah2022.06.07]
  'ImageOrientation: ImageOrientation!
  'Landmark: Landmark!
  *NCBITaxonomy:     String
  Age:              String
  AgeUnit:          Enum (Days, Months, Years)
  Sex:              Enum (Male, Female, Unknown)
  *Genotype:         String
  --
  *CoordinateFrame:  CoordinateFrame
  --
  Channels:         [Channel]
  --
  Version:          String
}

Experiment::Creator         *-- User
Experiment::Contributors    *-- Contributor
Experiment::License         *-- License
Experiment::ImageLocation   *-- BrainLocation
Experiment::ImageLocation   *-- Link
Experiment::CoordinateFrame *-- CoordinateFrame
Experiment::Channels        *-- Channel
'Experiment::Landmark *-- Landmark
'Experiment::ImageOrientation *-- ImageOrientation

'
'   Channel
'
class Channel {
'   Note that this corresponds to BossDB channel right now. May not be best for light microscopy. 
'   At present, remains a BossDB channel for initial discussion. Light Microscopy channel is-a channel (in BossDB sense).
'   Channels in other projects may represent other types of data.
  *ID:               String
  *Name:             String
  *Description:      String
  *Public:           Boolean
  *Creator:          [User]
  *Contributors:     [Contributor]
  *DateCreated:      Date
  DateModified:     Date
  *License:          License
  .. Additions ..
  '
  ' Fluorophore
  '     Fluorophore used in the channel (e.g. dgfp, alexa-561, ATO-647).
  '     [mah2022.07.18] Probably belongs in light microscopy specific.
  *Fluorophore:      String
  --
  *ImagingModality:  ImagingModalityGeneral
  ImagingModalitySpecific: ImagingModalitySpecific
  *ImageResolution:  ImageResolution
  *ChannelType:      ChannelType
  *DataType:         DataType
  VisualizationColor: String
  ImageExtent:      Number
  .. Additions ..
  '
  ' LightMicroscopyAttributes
  '     A portmanteau of attributes (microscope, objective, detector, illuminator, etc)
  '     specific to light microscopy. [mah2022.06.07]
  LightMicroscopyAttributes: LightMicroscopySpecific
  --
  *Version:          String          ' Version was not mandatory; should be.
}

Channel::Creator                *-- User
Channel::Contributors           *-- Contributor
Channel::License                *-- License
Channel::ImagingModalityGeneral *-- ImagingModalityGeneral
Channel::ImagingModalitySpecific *-- ImagingModalitySpecific
Channel::ImageResolution        *-- ImageResolution
Channel::ChannelType            *-- ChannelType
Channel::DataType               *-- DataType
Channel::LightMicroscopyAttributes *-- LightMicroscopySpecific

'   ------------------------------
'   Supporting classes
'   ------------------------------


class BrainLocation {
    *Name:           String
    *Location:       DataLocation
}

'   BrainLocation
'   Mandatory attributes: Neither Name nor Location were mandatory. Are now.
class BrainLocation {
    *Name:           String
    *Location:       DataLocation
}

BrainLocation::DataLocation *-- DataLocation

'
'   ImageOrientation
'   ImageOrientation adds the axis and obliqueness attributes used in the 3D-MMS
'   Image Category to describe the 3D orientation of the image.
'
'   TODO: Should  not all these attributes be mandatory? Without them, what is the orientation?
'
class ImageOrientation << new >> {
    *xAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueXDim1: Enum (Left,Right)
    *ObliqueXDim2: Enum (Anterior, Posterior)
    *ObliqueXDim3: Enum (Inferior, Superior)

    *yAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueYDim1: Enum (Left,Right)
    *ObliqueYDim2: Enum (Anterior, Posterior)
    *ObliqueYDim3: Enum (Inferior, Superior)

    *zAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueZDim1: Enum (Left,Right)
    *ObliqueZDim2: Enum (Anterior, Posterior)
    *ObliqueZDim3: Enum (Inferior, Superior)
}

'
'   Landmark
'   Landmark provides a named (x,y,z) coordinate tuple that designates
'   a point of interest within an Image. The coordinates are specified
'   in image pixels from origin. Not confident that this interpretation 
'   is correct. [mah2022.06.07]
'
'   TODO: Is specification in pixels correct?
'   TODO: Are not all the attributes of this class mandatory? None were...
'
class Landmark << new >> {
    *LandmarkName: String
    *LandmarkX: Number
    *LandmarkY: Number
    *LandmarkZ: Number
}

'
'   DataLocation
'
'   TODO: Should not all attributes here be mandatory? What is a named data location \n without a name, a location, or a time?
class DataLocation {
    *URI: String!
    *Xs: [Number]
    *Ys: [Number]
    *Zs: [Number]
    *Ts: [Number]
    *Resolution: ImageResolution
}

DataLocation::Resolution *-- ImageResolution

'
'   Publication
'   TODO: Review "mandatoriness" of each attribute...
class Publication {
    *Name:               [String]
    *URI:                [String]
    *Authors:            [String]
    .. Additions ..
    RelatedIdentifier:  String
    RelatedIdentifierType: Enum (arXiv, DOI, ISBN, PMID)
    PMCID:              String
    RelationType:       Enum (IsCitedBy, IsDocumentedBy)
    Citation:           String
}

'
'   Link
'
class Link {
    *Name: [String]
    *URI: [String]
}

'
'   Funding
'
class Funding {
    *FundingEntity: String                   ' Renamed, was "Sponsor"
    *AwardIdentifier: String                 ' Renamed, was "Grant"
    .. Additions ..
    FundingReferenceIentifier: String
    FundingReferenceIdentifierType: Enum (GRDI, \n ISNI, ORCID, ROR, RRID, Other)
    AwardTitle: String
}

'
'   Contributor
'
class Contributor {
' Can a singular Contributor have multiple names and emails?
' So -- is this String or [String]? [mah2022.06.07]
  *Name: [String] 
  *Email: [String] 
  .. Additions ..
  Creator: Boolean;
  ContributorType: Enum (ContactPerson, DataCollector, DataCurator, ProjectLeader,\n ProjectManager, ProjectMember, RelatedPerson, Researcher, ResearchGroup, Other)
  NameType: Enum (Organizational, Personal)
  NameIdentifier: Enum (GRID, ISNI, ORCID, ROR, RRID)
  NameIdentifierScheme: Enum (GRDI, ISNI, ORCID, ROR, RRID, Other)
  ' Why does a Contributor need a POC? [mah2022.06.07]
  POCName: String                           
  POCEmail: String
  Affiliation: String
  AffiliationIdentifier: Enum (GRID, ISNI, ORCID, ROR, RRID)
  AffiliationIdentifierScheme: Enum (GRDI, ISNI, ORCID, ROR, RRID, Other)
}

'
'   Taxonomy
'

class Taxonomy {
  TaxonomyID:  String
  CurrentName:  String
  GenbankCommon name:  String
  NCBIBLASTName: String
  Rank: String
  GeneticCode: String
  MitochondrialFeneticCode: String
  CommonName: [String]
  
}

'
'   Technique
'
enum Technique {
    DARTFISH
    fMOST
    MERFISH
    Patchseq
    Retrograde
    RetrogradeTracing
    smFISH
    TransynapticTracing
    TRIOTracing
    Other
}

'
'   License
'
class License {
    *Rights:                String      ' Renamed, was "License"                           
    *RightsURI:             String      ' Renamed, was "URI"               
    .. Additions ..
    *RightsIdentifier:      String      ' as SPDX_Code for license         
}

'
'   DOI
'
class DOI {
    *URI: String
}

'
'   Species [mah2022.06.07]
'       TODO: What about ModelOrganism? Butterflies? Miniature insects? Spiders? Lots of 
'             invertebrates.
'       TODO: Can this realistically be an enumeration? But if we use a more flexible type
'             (think "String"), won't we need a taxonomy and strong naming conventions to support
'             searches and queries?
enum Species {
  CElegans
  FruitFly
  Mouse
  Zebrafish
  Zebrafinch
  Human
}

'
'   DataType
'
enum DataType {
  Imagery
  Segmentation
  Skeletons
  Connectome
}

'
'   ChannelType
'
enum ChannelType {
  Image
  Segmentation
  Annotation
}

'
'   LightMicroscopySpecific [mah2022.06.07]
'   LightMicroscopySpecific captures characteristics of the microscope,
'   the objective, the detector, the illuminator, and characteristics
'   of the associated image(s) - illumination wavelength, detection 
'   wavelength, temperature, image size, image filename, image filesize,
'   the step increments and number of slices taken, and the channel 
'   identifier.
'
'   TODO: Need to specify the type of the Channel identifier, which
'         might be a string, an integer, or some other.
'
'   TODO: General observation: Specifying the type of an attribute as
'         "Number" seems insufficient. Must know the representation in order 
'         to parse. Is it an int8, int16, int32, int64, or a float or a double,
'         or some other representation? 
'
'   TODO: Image Orientation needs to be referenced here, rather than
'         in Experiment, since it is indeed a 3D-MMS property that is
'         Light Microscopy specific. And we need to add the xAxis, yAxis
'         and zAxis attributes, as well.
'
'   TODO: These attributes are specific to light microscopy. But are they 
'         perhaps applicable to EM? Or to XRM?
'
'   TODO: "Mandatoriness" of each attribute

'
class LightMicroscopySpecific <<new>> {
    MicroscopeType: String
    MicroscopeManufacturerAndModel: String
    ObjectiveManufacturerAndModel: String
    ObjectiveImmersion: ???                 ' TODO
    ObjectiveNA: ???                        ' TODO
    ObjectiveMagnification: Number
    DetectorType: String
    DetectorManufacturerAndModel: String
    IlluminationType: Enum???               ' TODO
    IlluminationWavelength: Number
    DetectionWavelength: Number
    SampleTemperature: Number
    XSize: Number
    YSize: Number
    ZSize: Number
    Gbyte: Number
    File: String
    DimensionOrder: ???                     ' TODO
    StepSizeX: Number
    StepSizeY: Number
    StepSizeZ: Number
    StepSizeT: Number
    Channel: ???                            ' TODO
    Slices: Number?                         ' TODO
    t: Number
    ImageOrientation: ImageOrientation
    Landmark: Landmark

}

note "These 3D-MMS derived attributes are optical.\nApplicable to EM? XRM?" as N1
N1 .. LightMicroscopySpecific

LightMicroscopySpecific::ImageOrientation *-- ImageOrientation
LightMicroscopySpecific::Landmark *-- Landmark

'
'   GeneralModality
'
enum GeneralModality {
    CellMorphology
    Connectivity
    PopulationImaging
    Spatial
    Transcriptomics
    Other
}

'
'   ImagingModalityGeneral
'
enum ImagingModalityGeneral {
  SEM
  TEM
  XRay
  MRI
  LightMicroscopy
  None
}

'
'   ImagingModalitySpecific
'       TODO: Much the same question as with Species: Can this realistically be an enumeration?
'             This enumeration is apt to be continually expanding. If not an enumeration, we'll
'             need to specify a strong naming convention, so that query and search remain 
'             efficient (and accurate). [mah2022.06.07]
enum ImagingModalitySpecific {
  ATUM_SEM
  SB_SEM
  SS_TEM
  S_TEM
  AT_TEM
  XRM
  XNH
  CLARITY
  MRI
  MRI_DTI
  None
  .. Additional ..
  FIB_SEM
  SBF_SEM
  ExperimentGT_TEM
  sAT 
  mAT 
  cryo-FIB_SEM
  REM
  STM
  AET
  AFM
}

'
'   User
'
class User {
  *Name: String
  *Email: String
}

'
'   CoordinateFrame
'
class CoordinateFrame {
  *Xs: [Number]
  *Ys: [Number]
  *Zs: [Number]
  --
  *VoxelSize: ImageResolution
}

CoordinateFrame::ImageResolution *-- ImageResolution

'
'   ImageResolution
'
class ImageResolution {
  *VoxelSize: [Number]
  *VoxelUnit: VoxelUnit
}

ImageResolution::VoxelUnit *-- VoxelUnit

'
'   VoxelUnit
'
enum VoxelUnit {
  nanometer
  micrometer
  millimeter
  centimeter
}

@enduml
