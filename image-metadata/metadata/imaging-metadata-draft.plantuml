@startuml Metadata

'   -----------------------------
'   Layout directives
'   -----------------------------

'   Grouping
together {
    'class Project
    class Collection
    class Experiment
    class Channel
}

together {
    class Channel
    class ImagingModalityGeneral
    class ImagingModalitySpecific
    class ImageResolution
}

'   Formatting for readability
'   Splitting into four pages
page 2x2
skinparam pageMargin 10
skinparam pageBorderColor black
skinparam pageBorderColor gray 

'
'   General comments and TO-DOs [mah2022.08.29]
'   Need to review with special attention to data types and structures. I suspect
'   this cut has confusions regarding entities vs references to entities.
'   Need to review all notes, comments and TO-DOs. 
'   Especially need to provide naming convention guidance for the free-form String parameters.
'   Need to be clear on just what we need to provide to be consistent with what is
'   needed and current BossDB best practices.
'
  
'   ------------------------------
'   Primary Classes
'   ------------------------------

'
'   Project
'
class Project {
  *ID:               String
  *Title:            String
  *ShortTitle:       String
  *Keywords:         [String]
  *Description:      String
  *Year:             Date
  *Public:           Boolean
  *Species:          [Species]
  Publications:     [Publication]
  Links:            [Link]
 *License:          [License]
  *Contributor:      [Contributor]
  Acknowledgements: String
  Funding:          [Funding]
  *DateCreated:      Date
  DateModified:     Date
  DOI:              DOI
  .. Additions ..
  
  SocialMedia: String
  Subject: String
  SubjectScheme: String
  --
  *ImagingModalities:        [ImagingModalityGeneral]
  ImagingModalitySpecific:  [ImagingModalitySpecific]
  DataTypes:                [DataType]

    ImageLocations:           [BrainLocation]
  .. Additions ..

  *GeneralModality:          GeneralModality

  GeneralModalityOther:     String

  *Technique:                [Technique]
  *TechniqueOther:           String
  Methods:                  String

  --
  
  *ImageBanner:          String
  *ImageTile:            String

  ImageHero:            String
  ImageHeroPosition:    String
  Media:                [String]

  --
  ' [ECJ2022.08.15]: should these be required?
  ' [mah2022.08.26]: Yes, as long as we know there will always be at least one instance of each. Done (on
  '                 that assumption).
  *Collections:          [Collection]
  *Experiments:          [Experiment]
  *Channels:             [Channel]
}

Project::ImageLocations         *-- BrainLocation
Project::Publications           *-- Publication
Project::Species                *-- Species
Project::Links                  *-- Link
Project::Contributor            *-- Contributor
Project::License                *-- License
Project::Funding                *-- Funding
Project::ImagingModalities      *-- ImagingModalityGeneral
Project::ImagingModalitySpecific *-- ImagingModalitySpecific
Project::DataTypes              *-- DataType
Project::Collections            *-- Collection
Project::Experiments            *-- Experiment
Project::Channels               *-- Channel
Project::DOI                    *-- DOI
Project::GeneralModality        *-- GeneralModality
Project::Technique              *-- Technique

'
'   Collection
'
class Collection {
  *ID:           String
  *Name:         String
  *Description:  String
  *Public:       Boolean
  *Creator:      [User]
  *Contributors: [Contributor]
  *DateCreated:  Date
  DateModified:  Date
  *License:      [License]
  Acknowledgements: String
  DOI:           DOI
  Version:       String

  .. Additions ..
  Citations:    [String]
  AccessControl: Boolean
  --
  Species:      [Species]
  .. Additions ..
  
    TaxonomyTerm: String
  --
  Experiments:  [Experiment]
}

Collection::Creator         *-- User
Collection::Contributors    *-- Contributor
Collection::License         *-- License
Collection::DOI             *-- DOI
Collection::Species         *-- Species
Collection::Experiments     *-- Experiment

'
'   Experiment
'
class Experiment {
  *ID:               String
  *Name:             String
  *Description:      String
  *Public:           Boolean
  *Creator:          [User]
  *Contributors:     [Contributor]
  *DateCreated:      Date
  DateModified:      Date
  *License:          License
  --

  *Species:         Species

  *ImageLocation:   BrainLocation
  *Protocol:        Link
  .. Additions ..
  
  *NCBITaxonomy:    String
  Age:              String
  AgeUnit:          Enum (Days, Months, Years)
  Sex:              Enum (Male, Female, Unknown)
  *Genotype:        String
  --
  *CoordinateFrame: CoordinateFrame
  --
  Channels:         [Channel]
  --
  Version:          String
}

Experiment::Creator         *-- User
Experiment::Contributors    *-- Contributor
Experiment::License         *-- License
Experiment::ImageLocation   *-- BrainLocation
Experiment::ImageLocation   *-- Link
Experiment::CoordinateFrame *-- CoordinateFrame
Experiment::Channels        *-- Channel

'
'   Channel
'
class Channel {
'   Note that this currently corresponds to a BossDB channel. May not be best for light microscopy. 
'   At present, remains a BossDB channel for initial discussion. Light Microscopy channel is-a channel (in BossDB sense).
'   Channels in other (non-LightMicroscopy) projects may represent other types of data.
'   [mah2022.10.17] That suggests we may need a set of imaging-modality-specific channel classes (e.g., LightMicroscopyChannel, etc). Do we?
  *ID:               String
  *Name:             String
  *Description:      String
  *Public:           Boolean
  *Creator:          [User]
  *Contributors:     [Contributor]
  *DateCreated:      Date
  DateModified:      Date
  *License:          License
  .. Additions ..
  --
  *ImagingModality:   ImagingModalityGeneral
  ImagingModalitySpecific: ImagingModalitySpecific
  *ImageResolution:   ImageResolution
  *ChannelType:       ChannelType
  *DataType:          DataType
  VisualizationColor: String
  ImageExtent:      ImageExtent

  .. Additions ..
  LightMicroscopyAttributes: LightMicroscopySpecific
  EMAttributes:       EMSpecific
  XRMAttributes:      XRMSpecific

  --
  *Version:          String
}

Channel::Creator                 *-- User
Channel::Contributors            *-- Contributor
Channel::License                 *-- License
Channel::ImagingModalityGeneral  *-- ImagingModalityGeneral
Channel::ImagingModalitySpecific *-- ImagingModalitySpecific
Channel::ImageResolution         *-- ImageResolution
Channel::ChannelType             *-- ChannelType
Channel::DataType                *-- DataType
Channel::LightMicroscopyAttributes *-- LightMicroscopySpecific
Channel::EMAttributes            *-- EMSpecific
Channel::XRMAttributes           *-- XRMSpecific
Channel::ImageExtent             *-- ImageExtent

'   ------------------------------
'   Supporting classes
'   ------------------------------

'
'   BrainLocation
class BrainLocation {
    *Name:           String
    *Location:       DataLocation
    Orientation:     ImageOrientation
}

BrainLocation::DataLocation *-- DataLocation

'
'   ImageOrientation
'   ImageOrientation adds the axis and obliqueness attributes used in the 3D-MMS
'   Image Category to describe the 3D orientation of the image.
'
'   TODO: Should not all these attributes be mandatory? Without them, what is the orientation?
'
class ImageOrientation << new >> {
    *xAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueXDim1: Enum (Left,Right)
    *ObliqueXDim2: Enum (Anterior, Posterior)
    *ObliqueXDim3: Enum (Inferior, Superior)

    *yAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueYDim1: Enum (Left,Right)
    *ObliqueYDim2: Enum (Anterior, Posterior)
    *ObliqueYDim3: Enum (Inferior, Superior)

    *zAxis: Enum (LeftToRight, RightToLeft,\n AnteriorToPosterior, PosteriorToAnterior,\n InferiorToSuperior, SuperiorToInferior, \n Oblique)
    *ObliqueZDim1: Enum (Left,Right)
    *ObliqueZDim2: Enum (Anterior, Posterior)
    *ObliqueZDim3: Enum (Inferior, Superior)
}

class ImageExtent <<new>> {
*xExtent: Number
*yExtent: Number
*zExtent: Number
}
'
'   Landmark
'   Landmark provides a named (x,y,z) coordinate tuple that designates
'   a point of interest within an Image. The coordinates are specified
'   in image pixels from origin. Not confident that this interpretation 
'   is correct. [mah2022.06.07]
'
'   TODO: Is specification in pixels correct?
'   TODO: Are not all the attributes of this class mandatory? None were...
'
class Landmark << new >> {
    *LandmarkName: String
    *LandmarkX: Number
    *LandmarkY: Number
    *LandmarkZ: Number
}

'
'   DataLocation
'
class DataLocation {
    URI: String!
    *Xs: [Number]
    *Ys: [Number]
    *Zs: [Number]
    Ts: [Number]
    *Resolution: ImageResolution
}

DataLocation::Resolution *-- ImageResolution

'
'   Publication
'   TODO: Review "mandatoriness" of each attribute...
class Publication {
    *Name:               [String]
    *URI:                [String]
    *Authors:            [String]
    .. Additions ..
    RelatedIdentifier:  String
    RelatedIdentifierType: Enum (arXiv, DOI, ISBN, PMID)
    PMCID:              String
    RelationType:       Enum (IsCitedBy, IsDocumentedBy)
    Citation:           String
}

'
'   Link
'
class Link {
    *Name: [String]
    *URI: [String]
}

'
'   Funding
'
class Funding {
    *FundingEntity: String
    *AwardIdentifier: String
    .. Additions ..
    FundingReferenceIentifier: String
    FundingReferenceIdentifierType: Enum (GRDI, \n ISNI, ORCID, ROR, RRID, Other)
    AwardTitle: String
}

'
'   Contributor
'
class Contributor {
  *Name: [String]
  Email: [String]
  .. Additions ..
  Creator: Boolean;
  ContributorType: Enum (ContactPerson, DataCollector, DataCurator, ProjectLeader,\n ProjectManager, ProjectMember, RelatedPerson, Researcher, ResearchGroup, Other)
  NameType: Enum (Organizational, Personal)
  NameIdentifier: Enum (GRID, ISNI, ORCID, ROR, RRID)
  NameIdentifierScheme: Enum (GRDI, ISNI, ORCID, ROR, RRID, Other)
  ' Why does a Contributor need a POC (Contributor::POCName, Contributor::POCEmail)? [mah2022.06.07][mah2022.08.29]
  POCName: String                           
  POCEmail: String
  Affiliation: String
  AffiliationIdentifier: Enum (GRID, ISNI, ORCID, ROR, RRID)
  AffiliationIdentifierScheme: Enum (GRDI, ISNI, ORCID, ROR, RRID, Other)
}

'
'   Technique
enum Technique {
    DARTFISH
    fMOST
    MERFISH
    Patchseq
    Retrograde
    RetrogradeTracing
    smFISH
    TransynapticTracing
    TRIOTracing
    Other
}

'
'   License
'
class License {
    *Rights:                String                            
    *RightsURI:             String 
    .. Additions ..
    *RightsIdentifier:      String
}

'
'   DOI
'
class DOI {
    *URI: String
}

'
'   Species [mah2022.06.07]
'       TODO: What about ModelOrganism? Butterflies? Miniature insects? Spiders? Lots of 
'             invertebrates.
'       TODO: Can this realistically be an enumeration? But if we use a more flexible type
'             (think "String"), won't we need a taxonomy and strong naming conventions to support
'             searches and queries? Specific keywords?
'   [ECJ2022.08.15]: Can we have a string with ‘other’? that allows for the taxonomy to apply?
'   [mah2022.08.26]: We could, but would it still be useful? Other -> String would still need to be searchable,
'                    so the comments regarding a strong naming convention still hold for the string associated
'                    with the "Other" enumeree...
enum Species {
  CElegans
  FruitFly
  Mouse
  Zebrafish
  Zebrafinch
  Human
  Other 
        ' [mah2022.08.29]: "Other" of questionable value in the absence of taxonomy and strong naming convention,
        '                  or possibly keywords of some standard kind...
}

'
'   DataType
'
enum DataType {
  Imagery
  Segmentation
  Skeletons
  Connectome
}

'
'   ChannelType
'
enum ChannelType {
  Image
  Segmentation
  Annotation
}

'
'   LightMicroscopySpecific [mah2022.06.07]
'   LightMicroscopySpecific captures characteristics of the microscope,
'   the objective, the detector, the illuminator, and characteristics
'   of the associated image(s) - illumination wavelength, detection 
'   wavelength, temperature, image size, image filename, image filesize,
'   the step increments and number of slices taken, and the channel 
'   identifier.
'
'   TODO: Need to specify the type of the Channel identifier, which
'         might be a string, an integer, or some other.
'
'   TODO: General observation: Specifying the type of an attribute as
'         "Number" seems insufficient. Must know the representation in order 
'         to parse. Is it an int8, int16, int32, int64, or a float or a double,
'         or some other representation? 
'         This needs to be addressed throughout...
'
'   TODO: Image Orientation needs to be referenced here, rather than
'         in Experiment, since it is indeed a 3D-MMS property that is
'         Light Microscopy specific. And we need to add the xAxis, yAxis
'         and zAxis attributes, as well.
'
'   TODO: These attributes are specific to light microscopy. But are they 
'         perhaps applicable to EM? Or to XRM?
'
'   TODO: "Mandatoriness" of each attribute

'
class LightMicroscopySpecific <<new>> {
    MicroscopeType: String
    MicroscopeManufacturerAndModel: String
    ObjectiveManufacturerAndModel: String
    ObjectiveImmersion: ???                 ' TODO
    ObjectiveNA: ???                        ' TODO
    ObjectiveMagnification: Number
    DetectorType: String
    DetectorManufacturerAndModel: String
    IlluminationType: Enum???               ' TODO
    IlluminationWavelength: Number
    DetectionWavelength: Number
    SampleTemperature: Number
    XSize: Number
    YSize: Number
    ZSize: Number
    Gbyte: Number
    File: String
    DimensionOrder: ???                     ' TODO
    StepSizeX: Number
    StepSizeY: Number
    StepSizeZ: Number
    StepSizeT: Number
    Channel: ???                            ' TODO
    Slices: Number?                         ' TODO
    t: Number
    ImageOrientation: ImageOrientation
    Landmark: Landmark
    Flourophore: String

}

class EMSpecific <<new>> {
    ' Populate following discussions with Erik and Pat.
}

class XRMSpecific <<new>> {
    ' Populate following discussion with Erik and Pat
}

LightMicroscopySpecific::ImageOrientation *-- ImageOrientation
LightMicroscopySpecific::Landmark *-- Landmark

'
'   GeneralModality
'
enum GeneralModality {
    CellMorphology
    Connectivity
    PopulationImaging
    Spatial
    Transcriptomics
    Other
}

'
'   ImagingModalityGeneral
'
enum ImagingModalityGeneral {
  SEM
  TEM
  XRay
  MRI
  LightMicroscopy
  None
}

'
'   ImagingModalitySpecific
'       TODO: Much the same question as with Species: Can this realistically be an enumeration?
'             This enumeration is apt to be continually expanding. If not an enumeration, we'll
'             need to specify a strong naming convention, so that query and search remain 
'             efficient (and accurate). [mah2022.06.07]
enum ImagingModalitySpecific {
  ATUM_SEM
  SB_SEM
  SS_TEM
  S_TEM
  AT_TEM
  XRM
  XNH
  CLARITY
  MRI
  MRI_DTI
  None
  .. Additional ..
  FIB_SEM
  SBF_SEM
  ExperimentGT_TEM
  sAT 
  mAT 
  cryo-FIB_SEM
}

'
'   User
'
class User {
  *Name: String
  *Email: String
}

'
'   CoordinateFrame
'
class CoordinateFrame {
  *Xs: [Number]
  *Ys: [Number]
  *Zs: [Number]
  --
  *VoxelSize: ImageResolution
}

CoordinateFrame::ImageResolution *-- ImageResolution

'
'   ImageResolution
'
class ImageResolution {
  *VoxelSize: [Number]
  *VoxelUnit: VoxelUnit
}

ImageResolution::VoxelUnit *-- VoxelUnit

'
'   VoxelUnit
'
enum VoxelUnit {
  nanometer
  micrometer
  millimeter
  centimeter
}

@enduml
